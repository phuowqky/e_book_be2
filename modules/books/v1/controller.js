import Book from '../../../models/book.js';
import cloudinary from '../../../config/cloudinary.js';
import streamifier from "streamifier";
import { supabase } from '../../../config/supabase.js';
import { parseEpubAndSave } from "./utils/epubParser.js";
import Chapter from "../../../modules/chapters/v1/chapters_model.js";
import pkg from "epub2";
const EPub = pkg.default || pkg;
import path from "path";
import fs from "fs";
import os from "os";
import { htmlToText } from "html-to-text";


// L·∫•y danh s√°ch s√°ch
export async function getBooks(req, res) {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    const books = await Book.find({ status: 'M·ªü' })
      .populate('createdBy', 'userName email')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit);

    const total = await Book.countDocuments({ status: 'M·ªü' });

    res.json({
      success: true, data: books, pagination: {
        page,
        limit,
        total,
        totalPages: Math.ceil(total / limit),
        hasMore: page * limit < total
      }
    });
  } catch (error) {
    res.status(200).json({ success: false, message: error.message });
  }
}

// L·∫•y chi ti·∫øt s√°ch
export async function getBookById(req, res) {
  try {
    const book = await Book.findById(req.params.id)
      .populate('createdBy', 'userName email');

    if (!book) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y s√°ch' });
    }

    res.json({ success: true, data: book });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
}

export async function createBook(req, res) {
  try {
    const { title, author, description, category, tags, publishYear, isbn, totalPages, language } = req.body;

    let coverImage = '';
    let epubFile = '';
    let epubFileName = '';
    let epubFileSize = 0;

    //  Upload cover image l√™n Cloudinary
    if (req.files && req.files.coverImage) {
      const uploadCoverImage = () =>
        new Promise((resolve, reject) => {
          const stream = cloudinary.uploader.upload_stream(
            {
              folder: 'book-covers',
              transformation: [
                { width: 400, height: 600, crop: 'fill' },
                { quality: 'auto' }
              ]
            },
            (error, result) => {
              if (error) reject(error);
              else resolve(result);
            }
          );
          streamifier.createReadStream(req.files.coverImage[0].buffer).pipe(stream);
        });

      const result = await uploadCoverImage();
      coverImage = result.secure_url;
    }

    //  Upload EPUB file l√™n Supabase Storage
    if (req.files && req.files.epubFile) {
      const epubFileData = req.files.epubFile[0];
      // T·∫°o fileName th·ª±c t·∫ø c√≥ timestamp ƒë·ªÉ tr√°nh tr√πng
      const fileNameOnSupabase = `epub-files/${Date.now()}-${epubFileData.originalname}`;

      const { data, error } = await supabase.storage
        .from('ebook_storage1')
        .upload(fileNameOnSupabase, epubFileData.buffer, {
          contentType: epubFileData.mimetype,
          cacheControl: '3600',
          upsert: false
        });

      if (error) throw error;

      // L·∫•y public URL
      const { data: urlData } = supabase.storage
        .from('ebook_storage1')
        .getPublicUrl(fileNameOnSupabase);

      epubFile = urlData.publicUrl;
      epubFileName = fileNameOnSupabase.split('/').pop(); // L∆∞u t√™n file th·ª±c t·∫ø
      epubFileSize = epubFileData.size;
    }

    //  L∆∞u s√°ch v√†o DB
    const book = new Book({
      title,
      author,
      description,
      coverImage,
      epubFile,
      epubFileName,
      epubFileSize,
      category,
      tags: tags ? tags.split(',') : [],
      publishYear,
      isbn,
      totalPages,
      language,
      createdBy: req.user.id
    });

    await book.save();

    //  Tr·∫£ v·ªÅ response
    res.status(201).json({
      success: true,
      data: book,
      message: 'T·∫°o s√°ch th√†nh c√¥ng'
    });

  } catch (error) {
    console.error('Error creating book:', error);
    res.status(500).json({ success: false, message: error.message });
  }
}


// C·∫≠p nh·∫≠t s√°ch
export async function updateBook(req, res) {
  try {
    const book = await Book.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true, runValidators: true }
    );

    if (!book) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y s√°ch' });
    }

    res.json({ success: true, data: book });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
}

// X√≥a s√°ch (soft delete)
export async function deleteBook(req, res) {
  try {
    const book = await Book.findByIdAndUpdate(
      req.params.id,
      { status: 'inactive' },
      { new: true }
    );

    if (!book) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y s√°ch' });
    }

    res.json({ success: true, message: 'ƒê√£ x√≥a s√°ch th√†nh c√¥ng' });
  } catch (error) {
    res.status(500).json({ success: false, message: error.message });
  }
}

export async function downloadEpub(req, res) {
  try {
    const { fileName } = req.params;

    if (!fileName) {
      return res.status(400).json({ success: false, message: "fileName kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
    }

    // T·∫£i file EPUB tr·ª±c ti·∫øp t·ª´ Supabase
    const { data, error } = await supabase.storage
      .from("ebook_storage1")
      .download(`epub-files/${fileName}`);

    if (error || !data) {
      console.error("‚ùå Supabase download error:", error);
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y file tr√™n Supabase" });
    }

    //  ƒê·ªçc stream th√†nh buffer
    const chunks = [];
    for await (const chunk of data.stream()) {
      chunks.push(chunk);
    }
    const buffer = Buffer.concat(chunks);

    //  G·ª≠i v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng EPUB
    res.setHeader("Content-Type", "application/epub+zip");
    res.setHeader("Content-Disposition", `attachment; filename="${fileName}"`);
    res.send(buffer);

    console.log(`üìò EPUB "${fileName}" t·∫£i v·ªÅ th√†nh c√¥ng (${buffer.length} bytes)`);
  } catch (error) {
    console.error(" Error downloading EPUB:", error);
    res.status(500).json({ success: false, message: "Internal server error" });
  }
}

export const uploadBook = async (req, res) => {
  try {
    const { title, author, epubUrl, category, language } = req.body;
    if (!epubUrl) throw new Error("Thi·∫øu link EPUB");

    //  Parse EPUB tr∆∞·ªõc ƒë·ªÉ l·∫•y metadata v√† chapters
    const parsedData = await parseEpubAndSave(epubUrl);

    //  Ki·ªÉm tra s√°ch ƒë√£ t·ªìn t·∫°i ch∆∞a
    let book = await Book.findOne({ title });
    if (!book) {
      book = await Book.create({
        title: title || parsedData.metadata.title,
        author: author || parsedData.metadata.author,
        description: parsedData.metadata.description,
        coverImage: parsedData.metadata.cover,
        epubFile: epubUrl,
        epubFileName: parsedData.metadata.filename || "",
        category: category || "Ch∆∞a ph√¢n lo·∫°i",
        language: language || "Unknown",
        status: "active",
      });
    }

    //  L∆∞u danh s√°ch chapter
    if (parsedData.chapters?.length) {
      const chapters = parsedData.chapters.map((chap) => ({
        bookId: book._id,
        title: chap.title,
        index: chap.index,
        // href: chap.href,
        content: ch.content
      }));
      await Chapter.insertMany(chapters);
    }

    res.status(200).json({
      success: true,
      message: "Upload & parse EPUB th√†nh c√¥ng",
      bookId: book._id,
      parsedData,
    });
  } catch (err) {
    console.error("üí• L·ªói uploadBook:", err);
    res.status(500).json({ success: false, message: err.message });
  }
};



export const uploadEpub = async (req, res) => {
  try {
    const file = req.file;
    if (!file) return res.status(400).json({ message: "Kh√¥ng c√≥ file EPUB" });

    const epubPath = path.join("uploads", file.filename);

    // Parse EPUB
    const parsedData = await parseEpub(epubPath);

    // Check s√°ch ƒë√£ t·ªìn t·∫°i theo title
    let book = await Book.findOne({ title: parsedData.metadata.title });

    if (!book) {
      // N·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi
      book = await Book.create({
        title: parsedData.metadata.title,
        author: parsedData.metadata.creator,
        description: parsedData.metadata.description,
        coverImage: parsedData.metadata.cover,
        epubFile: epubPath,
        epubFileName: file.filename,
        category: req.body.category || "Ch∆∞a ph√¢n lo·∫°i",
        language: req.body.language || "Unknown",
        status: "M·ªü",
      });
    }

    // L∆∞u danh s√°ch ch∆∞∆°ng
    if (parsedData.chapters && parsedData.chapters.length > 0) {
      const chapters = parsedData.chapters.map((chap) => ({
        bookId: book._id,
        title: chap.title,
        index: chap.index,
        // href: chap.href,
        content: ch.content
      }));
      await Chapter.insertMany(chapters);
    }

    res.json({
      success: true,
      message: "Upload & parse th√†nh c√¥ng",
      bookId: book._id,
      parsedData,
    });
  } catch (error) {
    console.error("L·ªói upload EPUB:", error);
    res.status(500).json({ message: "L·ªói khi upload ho·∫∑c parse EPUB" });
  }
};


export const getChapterContent = async (req, res) => {
  try {
    const { bookId, index } = req.params;

    const chapter = await Chapter.findOne({
      bookId,
      index: parseInt(index, 10),
    });

    if (!chapter)
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng" });

    res.json({ content: chapter.content });
  } catch (err) {
    console.error(" L·ªói getChapterContent:", err);
    res
      .status(err.status || 500)
      .json({ message: err.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh" });
  }
};


export const getListChapters = async (req, res) => {
  try {
    const { bookId } = req.params;

    //  Ki·ªÉm tra ƒë·∫ßu v√†o h·ª£p l·ªá
    if (!bookId) {
      return res.status(400).json({ success: false, message: "Thi·∫øu bookId trong y√™u c·∫ßu" });
    }

    //  Ki·ªÉm tra bookId c√≥ ph·∫£i ObjectId h·ª£p l·ªá kh√¥ng
    const isObjectId = /^[0-9a-fA-F]{24}$/.test(bookId);
    if (!isObjectId) {
      return res.status(400).json({ success: false, message: "bookId kh√¥ng h·ª£p l·ªá" });
    }

    //  T√¨m s√°ch theo ID
    const book = await Book.findById(bookId).select("title author");
    if (!book) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s√°ch" });
    }

    //  L·∫•y danh s√°ch chapter, ch·ªâ l·∫•y tr∆∞·ªùng c·∫ßn thi·∫øt
    const chapters = await Chapter.find({ bookId })
      .sort({ index: 1 })
      .select("index title href");

    //  Ki·ªÉm tra c√≥ d·ªØ li·ªáu hay kh√¥ng
    if (!chapters.length) {
      return res.status(404).json({
        success: false,
        message: "S√°ch n√†y ch∆∞a c√≥ ch∆∞∆°ng n√†o ƒë∆∞·ª£c l∆∞u"
      });
    }

    //  Tr·∫£ v·ªÅ d·ªØ li·ªáu
    res.status(200).json({
      success: true,
      book: {
        id: book._id,
        title: book.title,
        author: book.author,
      },
      totalChapters: chapters.length,
      chapters,
    });

  } catch (err) {
    console.error(" L·ªói getListChapters:", err);
    res.status(500).json({
      success: false,
      message: "L·ªói m√°y ch·ªß n·ªôi b·ªô",
      error: err.message,
    });
  }
};



export const uploadChaptersForBook = async (req, res) => {
  try {
    const { title, epubUrl } = req.body;
    if (!title || !epubUrl) {
      return res.status(400).json({
        success: false,
        message: "Ph·∫£i truy·ªÅn c·∫£ title v√† epubUrl",
      });
    }

    //  Ki·ªÉm tra s√°ch t·ªìn t·∫°i theo title
    let book = await Book.findOne({ title });
    if (!book) {
      // N·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi
      book = await Book.create({ title, epubFile: epubUrl });
    } else {
      // N·∫øu ƒë√£ c√≥, c·∫≠p nh·∫≠t epubFile
      book.epubFile = epubUrl;
      await book.save();
    }

    //  Parse EPUB
    const parsedData = await parseEpubAndSave(epubUrl);
    const { chapters } = parsedData;

    if (!chapters || chapters.length === 0) {
      return res.status(400).json({ success: false, message: "Kh√¥ng c√≥ ch∆∞∆°ng h·ª£p l·ªá" });
    }


    const chaptersToInsert = chapters.map((ch, idx) => ({
      bookId: book._id,
      index: idx,
      title: ch.title || `Ch∆∞∆°ng ${idx + 1}`,

      content: ch.content || "",
    }));

    //  X√≥a ch∆∞∆°ng c≈© c·ªßa s√°ch n·∫øu c√≥
    await Chapter.deleteMany({ bookId: book._id });

    // L∆∞u ch∆∞∆°ng m·ªõi
    await Chapter.insertMany(chaptersToInsert);

    res.status(200).json({
      success: true,
      message: `L∆∞u th√†nh c√¥ng ${chaptersToInsert.length} ch∆∞∆°ng c·ªßa s√°ch "${book.title}"`,
      bookId: book._id,
      totalChapters: chaptersToInsert.length,
    });

  } catch (err) {
    console.error(" L·ªói uploadChaptersForBook:", err);
    res.status(500).json({ success: false, message: err.message });
  }
};




export const getChapterByIndex = async (req, res) => {
  try {
    const { bookId, index } = req.params;

    //  T√¨m s√°ch theo _id
    const book = await Book.findById(bookId);
    if (!book) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s√°ch" });
    }

    //  T√¨m ch∆∞∆°ng theo bookId v√† index
    const chapter = await Chapter.findOne({ bookId: book._id, index: parseInt(index, 10) });
    if (!chapter) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ch∆∞∆°ng" });
    }

    //  Tr·∫£ v·ªÅ content
    res.status(200).json({
      success: true,
      bookTitle: book.title,
      chapterIndex: chapter.index,
      chapterTitle: chapter.title,
      content: chapter.content,
    });

  } catch (err) {
    console.error("L·ªói getChapterByIndex:", err);
    res.status(500).json({ success: false, message: err.message });
  }
};


