
// import pkg from "epub2";
// const EPub = pkg.default || pkg; // ‚úÖ L·∫•y class EPub

// import fs from "fs";
// import path from "path";
// import os from "os";

// /**
//  * H√†m parse EPUB t·ª´ URL ho·∫∑c file path v√† l∆∞u v√†o DB
//  * @param {string} epubUrl - link EPUB tr√™n Supabase
//  * @param {string} bookId - ID c·ªßa s√°ch trong MongoDB
//  */
// export async function parseEpubAndSave(epubUrl, bookId) {
//   try {
//     console.log("üîÑ ƒêang t·∫£i EPUB t·ª´ Supabase...");
//     const response = await fetch(epubUrl);
//     if (!response.ok) throw new Error("Kh√¥ng t·∫£i ƒë∆∞·ª£c file EPUB t·ª´ URL.");

//     const arrayBuffer = await response.arrayBuffer();
//     const buffer = Buffer.from(arrayBuffer);

//     // üìÇ T·∫°o file t·∫°m
//     // const tempPath = path.resolve(`temp-${Date.now()}.epub`);
//     const tempPath = path.join(os.tmpdir(), `temp-${Date.now()}.epub`);
//     fs.writeFileSync(tempPath, buffer);

//     console.log("‚úÖ EPUB t·∫£i xong, b·∫Øt ƒë·∫ßu parse...");

//     // ‚öôÔ∏è Parse EPUB
//     const epub = new EPub(tempPath); // ‚úÖ ph·∫£i d√πng new

//     // D√πng Promise ƒë·ªÉ ƒë·ª£i parse xong
//     const bookData = await new Promise((resolve, reject) => {
//       epub.on("end", () => {
//         resolve({
//           metadata: epub.metadata,
//           chapters: epub.flow.map((ch, index) => ({
//             index,
//             title: ch.title || `Ch∆∞∆°ng ${index + 1}`,
//             href: ch.href,
//           })),
//         });
//       });

//       epub.on("error", reject);
//       epub.parse();
//     });

//     console.log(`üìò S√°ch: ${bookData.metadata.title}`);
//     console.log(`üìÑ T·ªïng s·ªë ch∆∞∆°ng: ${bookData.chapters.length}`);

//     fs.unlinkSync(tempPath);
//     return bookData;
//   } catch (error) {
//     console.error("‚ùå L·ªói parse EPUB:", error);
//     throw error;
//   }
// }

import pkg from "epub2";
const EPub = pkg.default || pkg; // ‚úÖ t∆∞∆°ng th√≠ch c·∫£ CJS & ESM

import fs from "fs";
import path from "path";
import os from "os";

/**
 * Parse EPUB t·ª´ URL ho·∫∑c file path v√† tr·∫£ v·ªÅ metadata + danh s√°ch chapter
 * @param {string} epubUrl - link EPUB (tr√™n Supabase ho·∫∑c URL public)
 * @param {string} [bookId] - ID c·ªßa s√°ch (t√πy ch·ªçn)
 */
export async function parseEpubAndSave(epubUrl, bookId = null) {
  try {
    console.log("üîÑ ƒêang t·∫£i EPUB t·ª´:", epubUrl);

    // 1Ô∏è‚É£ T·∫£i file EPUB t·ª´ URL
    const response = await fetch(epubUrl);
    if (!response.ok) throw new Error("Kh√¥ng t·∫£i ƒë∆∞·ª£c file EPUB t·ª´ URL.");

    const buffer = Buffer.from(await response.arrayBuffer());

    // 2Ô∏è‚É£ T·∫°o file t·∫°m an to√†n
    const tempPath = path.join(os.tmpdir(), `temp-${Date.now()}.epub`);
    fs.writeFileSync(tempPath, buffer);

    console.log("‚úÖ EPUB t·∫£i xong, b·∫Øt ƒë·∫ßu parse...");

    // 3Ô∏è‚É£ Parse EPUB b·∫±ng epub2
    const epub = new EPub(tempPath);

    const bookData = await new Promise((resolve, reject) => {
      epub.on("end", () => {
        // üìò Metadata c∆° b·∫£n
        const metadata = {
          title: epub.metadata?.title || "Kh√¥ng r√µ ti√™u ƒë·ªÅ",
          author: epub.metadata?.creator || "Kh√¥ng r√µ t√°c gi·∫£",
          description: epub.metadata?.description || "",
          cover: epub.metadata?.cover || "",
        };

        // üìÑ Danh s√°ch ch∆∞∆°ng (l·ªçc b·ªõt c√°c file kh√¥ng ph·∫£i n·ªôi dung)
        const chapters = epub.flow
          .filter((ch) => {
            if (!ch.href) return false;
            return !/cover|toc|nav|info|thong_tin|title|copyright|acknowledg/i.test(
              ch.href
            );
          })
          .map((ch, index) => ({
            index,
            title:
              ch.title && !/cover|toc/i.test(ch.title)
                ? ch.title.trim()
                : `Ch∆∞∆°ng ${index + 1}`,
            href: ch.href,
          }));

        resolve({ metadata, chapters });
      });

      epub.on("error", reject);
      epub.parse();
    });

    // 4Ô∏è‚É£ X√≥a file t·∫°m
    if (fs.existsSync(tempPath)) fs.unlinkSync(tempPath);

    console.log(`üìò S√°ch: ${bookData.metadata.title}`);
    console.log(`üìÑ T·ªïng s·ªë ch∆∞∆°ng h·ª£p l·ªá: ${bookData.chapters.length}`);

    return bookData;
  } catch (error) {
    console.error("‚ùå L·ªói parse EPUB:", error);
    throw error;
  }
}