import Bookmark from "../../../models/bookmark_model.js";

// üü¢ Th√™m ho·∫∑c c·∫≠p nh·∫≠t bookmark
export const setBookmark = async (req, res) => {
  try {
    const { userId, bookId, chapterIndex, position } = req.body;

    if (!userId || !bookId || chapterIndex === undefined) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin userId, bookId ho·∫∑c chapterIndex",
      });
    }

    // T√¨m bookmark ƒë√£ t·ªìn t·∫°i
    let bookmark = await Bookmark.findOne({ userId, bookId });

    if (bookmark) {
      // c·∫≠p nh·∫≠t bookmark hi·ªán c√≥
      bookmark.chapterIndex = chapterIndex;
      bookmark.position = position ?? 0;
      await bookmark.save();
    } else {
      // t·∫°o bookmark m·ªõi
      bookmark = await Bookmark.create({
        userId,
        bookId,
        chapterIndex,
        position,
      });
    }

    res.status(200).json({
      success: true,
      message: "ƒê√°nh d·∫•u trang th√†nh c√¥ng",
      data: bookmark,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};

// üü£ L·∫•y bookmark theo user + book
export const getBookmark = async (req, res) => {
  try {
    const { userId, bookId } = req.params;

    const bookmark = await Bookmark.findOne({ userId, bookId });

    if (!bookmark) {
      return res.status(404).json({
        success: false,
        message: "Ch∆∞a c√≥ bookmark cho s√°ch n√†y",
      });
    }

    res.status(200).json({
      success: true,
      message: "L·∫•y bookmark th√†nh c√¥ng",
      data: bookmark,
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: error.message,
    });
  }
};
